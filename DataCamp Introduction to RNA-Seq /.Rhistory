de_results <- lfcShrink(dds =dds_data,coef = 2, type = "ashr")
plotMA(de_results, ylim = c(-8,8))
jpeg('rplot.jpg')
plotMA(de_results, ylim = c(-8,8))
jpeg('rplot.jpg')
jpeg('rplot.jpg')
plotMA(de_results, ylim = c(-8,8))
dev.off()
png('ashr.png')
plotMA(de_results, ylim = c(-8,8))
dev.off()
de_results <- lfcShrink(dds =dds_data,coef = 2, type = "apeglm")
png('apeglm.png')
plotMA(de_results, ylim = c(-8,8))
dev.off()
png('dispersion.png')
plotDispEsts((dds_data))
dev.off()
png('PCA.png')
plotPCA(vsd, intgroup="condition")
dev.off()
de_results <- lfcShrink(dds =dds_data,coef = 2, type = "ashr")
mcols(de_results)
summary(de_results)
de_results <- results(dds_data,
contrast = c("condition", "fibrosis",
"normal"),
alpha = 0.05,
lfcThreshold = 0.32)
de_results <- lfcShrink(dds =dds_data,coef = 2, type = "apeglm")
summary(de_results)
de_results <- results(dds_data,
contrast = c("condition", "fibrosis",
"normal"),
alpha = 0.05,
lfcThreshold = 0.32)
de_results <- lfcShrink(dds = dds_data,coef = 2, type = "apeglm")
summary(de_results)
de_results <- lfcShrink(dds = dds_data,coef = 2, type = "apeglm", res=de_results)
de_results <- results(dds_data,
contrast = c("condition", "fibrosis",
"normal"),
alpha = 0.05,
lfcThreshold = 0.5)
summary(de_results)
de_results <- results(dds_data,
contrast = c("condition", "fibrosis",
"normal"),
alpha = 0.05)
de_results <- lfcShrink(dds = dds_data,coef = 2, type = "apeglm")
summary(de_results)
de_results <- results(dds_data,
contrast = c("condition", "fibrosis",
"normal"),
alpha = 0.05,
lfcThreshold = 0.32)
de_results <- lfcShrink(dds = dds_data,coef = 2, type = "apeglm")
summary(de_results)
de_results <- results(dds_data,
contrast = c("condition", "fibrosis",
"normal"),
alpha = 0.05,
lfcThreshold = 0.37)
de_results <- lfcShrink(dds = dds_data,coef = 2, type = "apeglm")
summary(de_results)
de_results <- results(dds_data,
contrast = c("condition", "fibrosis",
"normal"),
alpha = 0.05,
lfcThreshold = 0.48) # 1.4 lf2c
de_results <- lfcShrink(dds = dds_data,coef = 2, type = "apeglm")
summary(de_results)
de_results <- results(dds_data,
contrast = c("condition", "fibrosis",
"normal"),
alpha = 0.05,
lfcThreshold = 0.58) # 1.5 lf2c
de_results <- lfcShrink(dds = dds_data,coef = 2, type = "apeglm")
summary(de_results)
de_results <- results(dds_data,
contrast = c("condition", "fibrosis",
"normal"),
alpha = 0.05,
lfcThreshold = 0.5) # 1.5 lf2c
de_results <- lfcShrink(dds = dds_data,coef = 2, type = "apeglm")
summary(de_results)
de_results <- results(dds_data,
contrast = c("condition", "fibrosis",
"normal"),
alpha = 0.05)
de_results <- lfcShrink(dds = dds_data,coef = 2, type = "apeglm")
summary(de_results)
library(annotables)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("annotables")
library(annotables)
grcm38
library(annotables)
install.packages("devtools")
devtools::install_github("stephenturner/annotables")
library(annotables)
install.packages("devtools")
devtools::install_github("stephenturner/annotables")
install.packages("devtools")
devtools::install_github("stephenturner/annotables")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("stephenturner/annotables")
Sys.getenv("GITHUB_PAT")
usethis::browse_github_pat()
create_github_token()
usethis::use_git_config(user.name = "IvyStreeter", user.email = "ivystreeter@protonmail.com")
usethis::create_github_token()
usethis::create_github_token(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)
"devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("stephenturner/annotables")
credentials::set_github_pat("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")
devtools::install_github("stephenturner/annotables")
library(annotables)
grcm38
# Extract
res_all <- data.frame(de_results) %>%
rownames_to_column(var = "ensgene") %>%
left_join(x = res_all,
y = grcm38[, c("ensgene", "symbol", "description")],
by = "ensgene")
library(magrittr)
# Extract
res_all <- data.frame(de_results) %>%
rownames_to_column(var = "ensgene") %>%
left_join(x = res_all,
y = grcm38[, c("ensgene", "symbol", "description")],
by = "ensgene")
library(dplyr)
# Extract
res_all <- data.frame(de_results) %>%
rownames_to_column(var = "ensgene") %>%
left_join(x = res_all,
y = grcm38[, c("ensgene", "symbol", "description")],
by = "ensgene")
# Extract
res_all <- data.frame(de_results) %>%
rownames_to_column(var = "ensgene") %>%
left_join(x = res_all,
y = grcm38[, c("ensgene", "symbol", "description")],
by = "ensgene")
# Extract
res_all <- data.frame(de_results) %>%
rownames_to_column(var = "ensgene") %>%
left_join(x = res_all,
y = grcm38[, c("ensgene", "symbol", "description")],
by = "ensgene")
# Extract
res_all <- data.frame(de_results) %>%
rownames_to_column(var = "ensgene") %>%
left_join(x = de_results,
y = grcm38[, c("ensgene", "symbol", "description")],
by = "ensgene")
# Extract
res_all <- data.frame(de_results) %>%
rownames_to_column(var = "ensgene") %>%
left_join(x = res_all,
y = grcm38[, c("ensgene", "symbol", "description")],
by = "ensgene")
de_results
data.frame(de_results)
# Extract
res_all <- data.frame(de_results) %>%
rownames_to_column(var = "ensgene") %>%
left_join(x = res_all,
y = grcm38[, c("ensgene", "symbol", "description")],
by = "ensgene")
View(res_all)
rownames_to_column(var = "ensgene")
# Load library for tidyverse
library(tidyverse)
library(DESeq2)
# Load library for RColorBrewer
library(RColorBrewer)
# Load library for pheatmap
library(pheatmap)
# Load library for tidyverse
library(tidyverse)
library(magrittr)
library(dplyr)
# Extract
res_all <- data.frame(de_results) %>%
rownames_to_column(var = "ensgene") %>%
left_join(x = res_all,
y = grcm38[, c("ensgene", "symbol", "description")],
by = "ensgene")
class(de_results)
data.frame(de_results)
class(data.frame(de_results))
res_all
rownames_to_column(var = "ensgene")
# Extract
res_all <- data.frame(de_results) %>%
rownames_to_column(var = "ensgene") %>%
left_join(x = res_all,
y = grcm38[, c("ensgene", "symbol", "description")],
by = "ensgene")
res_all <- data.frame(de_results)
res_all <- rownames_to_column(var = "ensgene") %>%
left_join(x = res_all,
y = grcm38[, c("ensgene", "symbol", "description")],
by = "ensgene")
View(res_all)
res_all <- left_join(x = res_all,
y = grcm38[, c("ensgene", "symbol", "description")],
by = "ensgene")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
grcm38
y = grcm38[, c("ensgene", "symbol", "description")]
res_all <- left_join(x = res_all,
y = grcm38[, c("ensgene", "symbol", "description")],
by = "ensgene")
de_results
res_all
View(res_all)
View(de_results)
# Extract
res_all <- data.frame(de_results)
View(res_all)
res_all <- rownames_to_column(var = "ensgene")
# Extract
res_all <- data.frame(de_results) %>%
rownames_to_column(var = "ensgene")
View(res_all)
# Extract
res_all <- data.frame(de_results) %>%
rownames_to_column(var = "ensgene") %>%
left_join(x = res_all,
y = grcm38[, c("ensgene", "symbol", "description")],
by = "ensgene")
View(res_all)
# Find significant genes
sig_res <- subset(res_all, padj < 0.05)
sig_res <- sig_res %>%
arrange(padj)
View(sig_res)
?results
# Expression heatmap (normalized counts)
# Subset only DE genes
sig_norm_counts <- normalized_counts[sig_res$engene,]
# Color
heat_colors <- brewer.pal(6, "YlOrRd")
display.brewer.all()
pheatmap(sig_norm_counts,
color = heat_colors,
cluster_rows = T,
show_rownames = F,
annotation = select(smoc2_metadata, condition),
scale = "row")
sig_norm_counts
smoc2_metadata
sig_norm_counts
normalized_counts
normalized_counts[sig_res$engene, ]
sig_res
# Color
# display.brewer.all()
heat_colors <- brewer.pal(6, "YlOrRed")
# Color
# display.brewer.all()
heat_colors <- brewer.pal(6, "YlOrRed")
# Color
# display.brewer.all()
heat_colors <- brewer.pal(6, "YlOrRd")
pheatmap(sig_norm_counts,
color = heat_colors,
cluster_rows = T,
show_rownames = F,
annotation = select(smoc2_metadata, condition),
scale = "row")
# Color
# display.brewer.all()
heat_colors <- brewer.pal(6, "PiYG")
smoc2_metadata
condition
sig_norm_counts
normalized_counts
# Expression heatmap (normalized counts)
# Subset only DE genes
sig_norm_counts <- normalized_counts[sig_res$ensgene, ]
# Color
# display.brewer.all()
heat_colors <- brewer.pal(6, "PiYG")
pheatmap(sig_norm_counts,
color = heat_colors,
cluster_rows = T,
show_rownames = F,
annotation = select(smoc2_metadata, condition),
scale = "row")
pheatmap(sig_norm_counts,
color = heat_colors,
cluster_rows = T,
show_rownames = F,
annotation = select(smoc2_metadata, condition),
scale = "row")
heatmap <- pheatmap(sig_norm_counts,
color = heat_colors,
cluster_rows = T,
show_rownames = F,
annotation = select(smoc2_metadata, condition),
scale = "row")
xx <- pheatmap(sig_norm_counts,
color = heat_colors,
cluster_rows = T,
show_rownames = F,
annotation = select(smoc2_metadata, condition),
scale = "row")
save_pheatmap_pdf <- function(x, filename, width=7, height=7) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
pdf(filename, width=width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
save_pheatmap_pdf(xx, "test.png")
dev.off()
x <- pheatmap(sig_norm_counts,
color = heat_colors,
cluster_rows = T,
show_rownames = F,
annotation = select(smoc2_metadata, condition),
scale = "row")
save_pheatmap_png <- function(x, filename, width=1200, height=1000, res = 150) {
png(filename, width = width, height = height, res = res)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
save_pheatmap_png(my_heatmap, "my_heatmap.png")
my_heatmap <- pheatmap(sig_norm_counts,
color = heat_colors,
cluster_rows = T,
show_rownames = F,
annotation = select(smoc2_metadata, condition),
scale = "row")
save_pheatmap_png <- function(x, filename, width=1200, height=1000, res = 150) {
png(filename, width = width, height = height, res = res)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
save_pheatmap_png(my_heatmap, "my_heatmap.png")
# Volcano plot
res_all_vol <- res_all %>%
rownames_to_column(var = "ensgene") %>%
mutate(threshold = padj < 0.05)
# Volcano plot
res_all <- res_all %>%
rownames_to_column(var = "ensgene") %>%
mutate(threshold = padj < 0.05)
res_all
view(res_all)
# Volcano plot
res_all <- res_all %>%
rownames_to_column(var = "ensgene") %>%
mutate(threshold = padj < 0.05)
rlang::last_trace()
res_all
view(res_all)
# Volcano plot
res_all <- res_all %>%
rownames_to_column(var = "ensgene") %>%
mutate(threshold = padj < 0.05)
# Volcano plot
new <- res_all %>%
rownames_to_column(var = "ensgene") %>%
mutate(threshold = padj < 0.05)
rownames_to_column(var = "ensgene")
rownames_to_column(res_all, var = "ensgene")
ggplot(res_all) +
geom_point(aes(x = log2FoldChange, y = -log10(padj),
color = threshold)) +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
theme(legend.position = "none",
plot.title = elemental_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
ggplot(res_all) +
geom_point(aes(x = log2FoldChange, y = -log10(padj),
color = threshold)) +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
# Volcano plot
res_all <- res_all %>%
rownames_to_column(var = "ensgene") %>%
mutate(threshold = padj < 0.05)
# Volcano plot
res_all <- res_all %>%
rownames_to_column(var = "gene") %>%
mutate(threshold = padj < 0.05)
res_all
view(res_all)
ggplot(res_all) +
geom_point(aes(x = log2FoldChange, y = -log10(padj),
color = threshold)) +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
ggsave("Volcanoplot.png", width = 7, height = 7)
ggplot(res_all) +
geom_point(aes(x = log2FoldChange, y = -log10(padj),
color = threshold)) +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
ylim=c(0, 15) +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
# Volcano plot
library(ggplot2)
ggplot(res_all) +
geom_point(aes(x = log2FoldChange, y = -log10(padj),
color = threshold)) +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
ylim = c(0, 15) +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
ggplot(res_all) +
geom_point(aes(x = log2FoldChange, y = -log10(padj),
color = threshold)) +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
ylim(0, 15) +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
ggplot(res_all) +
geom_point(aes(x = log2FoldChange, y = -log10(padj),
color = threshold)) +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
ylim(0, 30) +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
ggsave("Volcanoplot.png", width = 7, height = 7)
ggplot(res_all) +
geom_point(aes(x = log2FoldChange, y = -log10(padj),
color = threshold)) +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
ylim(0, 15) +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
ggplot(res_all) +
geom_point(aes(x = log2FoldChange, y = -log10(padj),
color = threshold)) +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
ylim(0, 10) +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
ggsave("Volcanoplot.png", width = 7, height = 7)
ggplot(res_all) +
geom_point(aes(x = log2FoldChange, y = -log10(padj),
color = threshold)) +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
#  ylim(0, 10) +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
ggsave("Volcanoplot.png", width = 7, height = 7)
res_all_2 <- res_all %>%
rownames_to_column(var = "gene") %>%
mutate(threshold = padj < 0.05)
# Expression plot
top_20 <- data.frame(sig_norm_counts)[1:20,] %>%
rownames_to_column(var = "ensgene")
top_20 <- gather(top_20, key = "samplename", value = "normalized_counts", 2:8)
top_20 <- inner_join(top_20,
rownames_to_column(smoc2_metadata, var = "samplenames"),
by = "samplename")
top_20 <- inner_join(top_20,
rownames_to_column(smoc2_metadata, var = "samplename"),
by = "samplename")
ggplot(top_20) +
geom_point(aes(x = ensgene, y = normalized_counts, color = condition)) +
scale_y_log10() +
xlab("Genes") +
ylab("Normalized Counts") +
ggtitle("Top 20 Significant DE Genes") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5))
ggsave("ExpressionPlot.png", width = 7, height = 7)
dev.off()
git config --global user.email 78331713+IvyStreeter@users.noreply.github.com
# Extract the top 6 genes with padj values
smoc2_sig %>%
arrange(padj) %>%
select(geneID, padj) %>%
git config --global user.email 78331713+IvyStreeter@users.noreply.github.com
